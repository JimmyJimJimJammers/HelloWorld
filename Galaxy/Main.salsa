// File Created by Colin Fortuner & Jim McCarthy

module Galaxy;

import java.io.*;
import java.util.*;


behavior Main 
{
	String starsFile = "test.txt";   
	long startTime = 0;              
	String serverName = "localhost";  
	String theatersFile = "theatersFile.txt";           
	int numStars;                        
	double[][] starPoints;


	int xIndex = 0;
    int yIndex = 1;
    int zIndex = 2;
    int minIndex = 3;
    int maxIndex = 4;
    int xMinIndex = 5;
    int yMinIndex = 6;
    int zMinIndex = 7;
    int xMaxIndex = 8;
    int yMaxIndex = 9;
    int zMaxIndex = 10;
    int avgIndex = 11;
    int numStarsIndex = 12; // used to encode the result of one actor with an array of doubles

	void act(String [] argv)		// handle the user arguements
	{
			
		if (argv[argv.length-1].equals("-c"))
		{
			starsFile = argv[0];
            readInput()@SendtoActressesConcurrent();			// concurrent version
		}
		else 
		{
			if (argv.length == 3) 
			{
				starsFile = argv[0];
				serverName = argv[1];
				theatersFile = argv[2];
			}
			readInput()@SendtoActresses();			// distributive
		}
	}

	void readInput()			// function to read input and remove duplicate lines
	{
		try 
		{

			BufferedReader bufferedReader = new BufferedReader(new FileReader(starsFile));
			boolean duplicate = false;
            String tempStar = bufferedReader.readLine();
            numStars = Integer.parseInt(tempStar);
            starPoints = new double[numStars][3];
            String[] tempLines = new String[numStars];
            int temp = 0;
            int subtractNum = 0;
            int i=0;
			while ((tempStar = bufferedReader.readLine()) != null)
			{
				if (!tempStar.equalsIgnoreCase("")) 
				{
					// remove duplicates from a file using string comparison!!!
               		for (int x =0; x < temp; x++)
               		{
               			if (tempLines[x].equals(tempStar))
               			{
               				subtractNum++;
               				duplicate = true;		
               			}
               		}
               		if (duplicate == true){
               			duplicate = false;
               			continue;
               		}

					String[] parts = tempStar.split(" ");
                	if(parts.length > 1)
                	{
	                    starPoints[i][0] = Double.parseDouble(parts[0]);						// adding stars to 3D array of doubles
	                    starPoints[i][1] = Double.parseDouble(parts[1]);
	                    starPoints[i][2] = Double.parseDouble(parts[2]);
               		}
               		tempLines[temp] = tempStar;
					temp++;

				}
				i++;
			}

			numStars = numStars - subtractNum;	// number of duplicates removed
			bufferedReader.close();
		} 
		catch (IOException ioe) 
		{
			standardOutput<-print("File Error: " + starsFile + "\n");
		}

	}

	//Concurrent version
	void SendtoActressesConcurrent() {

		//create Actresses and assign data
		Actress[] Actresses = new Actress[numStars];
		int t =0;
		while (t < numStars)
		{                                
			Actresses[t] = new Actress();
			t++;
		}

		
		startTime = System.currentTimeMillis();
		standardOutput<-print("Program Start: \n");	

		join 																// Starting the computation
		{
			int x = 0;
			while(x < numStars)
			{
            Actresses[x]<-findDistances(x, starPoints);
				x++;
			}
		}@compareData(token);
	}

	void SendtoActresses() {				// distributed version 

		//create Actresses and assign data
		Actress[] Actresses = new Actress[numStars];
		ArrayList theaters = new ArrayList();
		String theater;
		int u = 0;
		while( u < numStars)
		{                                   	// first create actresses
			Actresses[u] = new Actress();
			u++;
		}


		try {															// try to find theaters
			BufferedReader bufferedReader = new BufferedReader(new FileReader(theatersFile));
			while ((theater = bufferedReader.readLine()) != null) {
				theaters.add(theater);
			}
			bufferedReader.close(); 
		} catch (IOException ioe){
			standardOutput<-println("File Error: " + theatersFile);
		}

		int looper = 0;                                    
		int x = 0;
		while (looper < numStars)				/// send stuff to theaters
		{
			if (x == theaters.size())
				x = 0;
			standardOutput<-print("Sending Actress uan://" + serverName + ":3030/a"+ x +" to rmsp://" +theaters.get(x)+"/a"+x + "\n");

			Actresses[x] = new Actress() at (new UAN("uan://"+serverName+":3030/a"+x), new UAL("rmsp://"+theaters.get(x)+"/a"+x));
			x++;
		}

		standardOutput<-print("Program Start: \n");
		startTime = System.currentTimeMillis();
		
		//start computation using join method
		join 
		{
			int t =0;
			while(t < numStars)
			 {
				Actresses[t]<-run(t, starPoints, numStars);
				t++;
			}
		}@compareData(token);
	}

    //takes the actressOutput from the Actresses and combines them
	void compareData(Object[] actressOutput)
    {
        //closest neighbours
		double closestNeighborDist = Double.MAX_VALUE;
        //farthest neighbours
        double farthestNeighborDist = 0.0;
        //minimum max distance **
        double minFarthestStar = Double.MAX_VALUE;
        //maximum min distance **
        double maxClosestStar = 0.0;
        // minimum average distance
        double minAverageDist = Double.MAX_VALUE;

        //for holding the each star and it's closest neighbor
		ArrayList[] closestNeighbor = new ArrayList[6];             //pair
        // farthest neighbour pairs
        ArrayList[] farthestNeighbor = new ArrayList[6];            //pair
        //ideal hub stars
        ArrayList[] idealHubStar = new ArrayList[6];                //single
        // ideal jail stars
        ArrayList[] idealJailStar = new ArrayList[6];               //single
        // ideal capital stars
        ArrayList[] idealCapitalStar = new ArrayList[3];            //single

        //go through and make an ArrayList for each coordinate?
		for (int i = 0; i < 6; i++)
        {
            closestNeighbor[i] = new ArrayList();
            farthestNeighbor[i] = new ArrayList();
            idealHubStar[i] = new ArrayList();
            idealJailStar[i] = new ArrayList();

            if(i < 3)
            {
                idealCapitalStar[i] = new ArrayList();
            }

        }

	
		for (int i = 0; i < numStars; i++)
        {
            //if the closest neighbors for this pair is closer, update the value
			if ((Double)((ArrayList)actressOutput[i]).get(minIndex) <= closestNeighborDist)
            {
                //standardOutput<-print("Closest Dist: " + (Double)((ArrayList)actressOutput[i]).get(minIndex) + " <= " + closestNeighborDist + "\n");
                if((Double)((ArrayList)actressOutput[i]).get(minIndex) < closestNeighborDist)
                {
                    //standardOutput<-print("Clearing\n");
                    for (int j = 0; j < 6; j++)
                    {
                        closestNeighbor[j].clear();
                    }
                }

				closestNeighborDist = (Double)((ArrayList)actressOutput[i]).get(minIndex);
				closestNeighbor[0].add((Double)((ArrayList)actressOutput[i]).get(xIndex));
				closestNeighbor[1].add((Double)((ArrayList)actressOutput[i]).get(yIndex));
				closestNeighbor[2].add((Double)((ArrayList)actressOutput[i]).get(zIndex));
				closestNeighbor[3].add((Double)((ArrayList)actressOutput[i]).get(xMinIndex));
				closestNeighbor[4].add((Double)((ArrayList)actressOutput[i]).get(yMinIndex));
				closestNeighbor[5].add((Double)((ArrayList)actressOutput[i]).get(zMinIndex));
			}

			if ((Double)((ArrayList)actressOutput[i]).get(maxIndex) >= farthestNeighborDist)
            {
                //standardOutput<-print("\tFarthest Dist: " + (Double)((ArrayList)actressOutput[i]).get(maxIndex) + " >= " + farthestNeighborDist + "\n");
                if((Double)((ArrayList)actressOutput[i]).get(maxIndex) > farthestNeighborDist)
                {
                    //standardOutput<-print("\tClearing\n");
                    for (int j = 0; j < 6; j++)
                    {
                        farthestNeighbor[j].clear();
                    }
                }
                farthestNeighborDist = (Double)((ArrayList)actressOutput[i]).get(maxIndex);
                farthestNeighbor[0].add((Double)((ArrayList)actressOutput[i]).get(xIndex));
                farthestNeighbor[1].add((Double)((ArrayList)actressOutput[i]).get(yIndex));
                farthestNeighbor[2].add((Double)((ArrayList)actressOutput[i]).get(zIndex));
                farthestNeighbor[3].add((Double)((ArrayList)actressOutput[i]).get(xMaxIndex));
                farthestNeighbor[4].add((Double)((ArrayList)actressOutput[i]).get(yMaxIndex));
                farthestNeighbor[5].add((Double)((ArrayList)actressOutput[i]).get(zMaxIndex));
			}

			if ((Double)((ArrayList)actressOutput[i]).get(maxIndex) <= minFarthestStar)
            {
                //standardOutput<-print("\t\tClosest Farthest: " + (Double)((ArrayList)actressOutput[i]).get(maxIndex) + " <= " + minFarthestStar + "\n");
                if ((Double)((ArrayList)actressOutput[i]).get(maxIndex) < minFarthestStar)
                {
                    //standardOutput<-print("\t\tClearing\n");
                    for(int j = 0; j < 6; j++)
                    {
                        idealHubStar[j].clear();
                    }
                }

				minFarthestStar = (Double)((ArrayList)actressOutput[i]).get(maxIndex);
				idealHubStar[0].add((Double)((ArrayList)actressOutput[i]).get(xIndex));
				idealHubStar[1].add((Double)((ArrayList)actressOutput[i]).get(yIndex));
				idealHubStar[2].add((Double)((ArrayList)actressOutput[i]).get(zIndex));
				idealHubStar[3].add((Double)((ArrayList)actressOutput[i]).get(xMaxIndex));//hold on
				idealHubStar[4].add((Double)((ArrayList)actressOutput[i]).get(yMaxIndex));//hold on
				idealHubStar[5].add((Double)((ArrayList)actressOutput[i]).get(zMaxIndex));//hold on
			}

			if ((Double)((ArrayList)actressOutput[i]).get(minIndex) >= maxClosestStar)
            {
                //standardOutput<-print("\t\t\tFarthest Closest: " + (Double)((ArrayList)actressOutput[i]).get(minIndex) + " >= " + maxClosestStar + "\n");
                if ((Double)((ArrayList)actressOutput[i]).get(minIndex) > maxClosestStar)
                {
                    //standardOutput<-print("\t\t\tClearing\n");
                    for (int j = 0; j < 6; j++)
                    {
                        idealJailStar[j].clear();
                    }
                }

				maxClosestStar = (Double)((ArrayList)actressOutput[i]).get(minIndex);
				idealJailStar[0].add((Double)((ArrayList)actressOutput[i]).get(xIndex));
				idealJailStar[1].add((Double)((ArrayList)actressOutput[i]).get(yIndex));
				idealJailStar[2].add((Double)((ArrayList)actressOutput[i]).get(zIndex));
				idealJailStar[3].add((Double)((ArrayList)actressOutput[i]).get(xMinIndex));//hold on
				idealJailStar[4].add((Double)((ArrayList)actressOutput[i]).get(yMinIndex));//hold on
				idealJailStar[5].add((Double)((ArrayList)actressOutput[i]).get(zMinIndex));//hold on
			}

			if ((Double)((ArrayList)actressOutput[i]).get(avgIndex) <= minAverageDist)
            {
                //standardOutput<-print("\t\t\t\tMinimum Average: " + (Double)((ArrayList)actressOutput[i]).get(avgIndex) + " <= " + minAverageDist + "\n");
                if ((Double)((ArrayList)actressOutput[i]).get(avgIndex) < minAverageDist)
                {
                    //standardOutput<-print("\t\t\t\tClearing\n");
                    for (int j = 0; j < 3; j++)
                    {
                        idealCapitalStar[j].clear();
                    }
                }
				minAverageDist = (Double)((ArrayList)actressOutput[i]).get(avgIndex);
				idealCapitalStar[0].add((Double)((ArrayList)actressOutput[i]).get(xIndex));
				idealCapitalStar[1].add((Double)((ArrayList)actressOutput[i]).get(yIndex));
				idealCapitalStar[2].add((Double)((ArrayList)actressOutput[i]).get(zIndex));
			}
		}

		token closestNeighborDup = removeDuplicates(closestNeighbor);
		token farthestNeighborDup = removeDuplicates(farthestNeighbor);

        long result = System.currentTimeMillis() - startTime;							// get the working time 

        standardOutput<-print("\nClosest Neighbor Distance: " + closestNeighborDist + "\n") @
        printAllElements(closestNeighborDup, 6) @
        standardOutput<-println("Farthest Neighbor Distance: " + farthestNeighborDist) @
        printAllElements(farthestNeighborDup, 6) @
        standardOutput<-println("Minimum Farthest Star Distance (Ideal Hub): " + minFarthestStar) @
        printAllElements(idealHubStar, 3) @
        standardOutput<-println("Maximum Closest Star Distance (Ideal Jail): " + maxClosestStar) @
        printAllElements(idealJailStar, 3) @
        standardOutput<-println("Minimum Average Distance (Ideal Capital): " + minAverageDist) @
        printAllElements(idealCapitalStar, 3) @
        standardOutput<-print("Completion Time: " + result + " ms.\n");

	}
    void printAllElements(ArrayList[] outputStuff, int arraySize)
    {
        for(int i = 0; i < outputStuff[0].size(); i++)
        {
            standardOutput<-print("\t(");
            for(int j = 0; j < arraySize; j++)
            {
                if(j == 3)
                {
                    standardOutput<-print("(");
                }
                double temp = (Double)outputStuff[j].get(i);
                if((j+1)%3 != 0)
                {
                    standardOutput<-print(temp + ", ");
                }
                else
                {
                    standardOutput<-print(temp + ")");
                }
            }
            standardOutput<-print("\n");
        }
    }



ArrayList[] removeDuplicates(ArrayList[] data) 
    {	
    	for (int x = 0; x < data[0].size(); x++ )
    	{
    		//boolean removed = false;
    		for (int y = x+1; y < data[0].size(); y++)
    		{
    			if (((Double)data[0].get(x)).equals((Double)data[3].get(y)) &&
    				((Double)data[1].get(x)).equals((Double)data[4].get(y)) &&
    				((Double)data[2].get(x)).equals((Double)data[5].get(y)) &&
    				((Double)data[3].get(x)).equals((Double)data[0].get(y)) &&
    				((Double)data[4].get(x)).equals((Double)data[1].get(y)) &&
    				((Double)data[5].get(x)).equals((Double)data[2].get(y)))
    			{
    				for (int l = 0; l < 6; l++)
    				{ 
    					data[l].remove(x);
    				}
    				x--;
    			}
    		}
    	}
    	return data;
    }
}
