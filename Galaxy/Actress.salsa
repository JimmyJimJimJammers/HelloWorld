module Galaxy;
import java.io.*;
import java.util.*;

// this handles all of the parallelization
behavior Actress
{
    //this is what will run if we compile and run this file alone, it tests whether or not the methods work
    void act(String args[])
    {
        //empty because we will never run this class alone.
    }

    //the location of this Actresss star
	double startX = 0.0;
	double startY = 0.0;
	double startZ = 0.0;

    //these are the index locations of the return values in the array returnValues
    int xIndex = 0;
    int yIndex = 1;
    int zIndex = 2;
    int minIndex = 3;
    int maxIndex = 4;
    int xMinIndex = 5;
    int yMinIndex = 6;
    int zMinIndex = 7;
    int xMaxIndex = 8;
    int yMaxIndex = 9;
    int zMaxIndex = 10;
    int avgIndex = 11;
    int numStarIndex = 12; // used to encode the result of one worker with an array of doubles

	//take the nth star (using the processed file of stars) and find all of the requested values
	ArrayList calc(int n, String fileProcessed, int numStar)
    {
		double[][] starPoints = new double[numStar][3];

		try
        {
            //get the file that has all the non-duplicate stars
			BufferedReader inputFile = new BufferedReader(new FileReader(fileProcessed));

            //go through every line and gather star locations
			for (int i = 0; i < numStar; i++)
            {
				String stringPoints = inputFile.readLine();
				String[] parts = stringPoints.split(" ");
                if(parts.length > 1)
                {
                    starPoints[i][0] = Double.parseDouble(parts[0]);
                    starPoints[i][1] = Double.parseDouble(parts[1]);
                    starPoints[i][2] = Double.parseDouble(parts[2]);
                }
			}
			inputFile.close();
		}
        catch (IOException ioe)
        {
			standardOutput<-println("[error] Can't open the file " + fileProcessed + " for reading.");
		}

        //get the locations values of the star we are currently interested in
        startX= starPoints[n][0];
		startY = starPoints[n][1];
		startZ = starPoints[n][2];

        //make a new list of the values we are interested in
		double[] returnValues = new double[numStarIndex];

        //initialize values to current star location
        returnValues[xIndex] = 0;
        returnValues[xMinIndex] = 0;
        returnValues[xMaxIndex] = 0;
        returnValues[yIndex] = 0;
        returnValues[yMinIndex] = 0;
        returnValues[yMaxIndex] = 0;
        returnValues[zIndex] = 0;
        returnValues[zMinIndex] = 0;
        returnValues[zMaxIndex] = 0;
		returnValues[minIndex] = Double.MAX_VALUE;   //unlikely for this to be the longest
		returnValues[maxIndex] = -1.0;               //impossible for this to be the shortest
		returnValues[avgIndex] = 0.0;


        //calculate the min and max to the first star in the list
        //token tokenReturnValues = findMinMaxAvg1(returnValues, starPoints[0]);
        for (int i = 0; i < starPoints.length; i++) if (i != n)
        {
            //calculate the min and max to the rest of the stars in the list
            //tokenReturnValues = findMinMaxAvg1(tokenReturnValues, starPoints[i]);

            //get the difference between this current star and the star passed to the method
            double xDist = startX-starPoints[i][0];
            double yDist = startY-starPoints[i][1];
            double zDist = startZ-starPoints[i][2];

            //if that difference is not 0
            if (xDist != 0.0 || yDist != 0.0 || zDist != 0.0)
            {
                //calculate the distance between
                double distance = Math.sqrt(xDist*xDist+yDist*yDist+zDist*zDist);

                //if the distance is smaller than the current minimum then set the new min
                if (distance < returnValues[minIndex])
                {
                    returnValues[minIndex] = distance;
                    returnValues[xMinIndex] = starPoints[i][0];
                    returnValues[yMinIndex] = starPoints[i][1];
                    returnValues[zMinIndex] = starPoints[i][2];
                }

                //if the distance is larger than the current maximum then set the new max
                if (distance > returnValues[maxIndex])
                {
                    returnValues[maxIndex] = distance;
                    returnValues[xMaxIndex] = starPoints[i][0];
                    returnValues[yMaxIndex] = starPoints[i][1];
                    returnValues[zMaxIndex] = starPoints[i][2];
                }

                //add the distance to the Average
                returnValues[avgIndex] += distance;
            }
        }

        returnValues[avgIndex] /= starPoints.length;

        //standardOutput<-println("\nStar: (" + returnValues[xIndex] + ", " + returnValues[yIndex] + ", " + returnValues[zIndex] + ")\n\tMin: " + returnValues[minIndex] + "\n\tto: " + returnValues[xMinIndex] + " " + returnValues[yMinIndex] + " " + returnValues[zMinIndex] + "\n\tMax: " + returnValues[maxIndex] + "\n\tto: (" + returnValues[xMaxIndex] + ", " + returnValues[yMaxIndex] + ", " + returnValues[zMaxIndex] + ")\n\tAvg: " + returnValues[avgIndex]);

        //return the results via message
        returnSelf(returnValues)@createArrayList(token)@currentContinuation;

		//findMinMaxAvg(returnValues, n, starPoints)@getAvg(token, starPoints.length)@createArrayList(token)@currentContinuation;
	}

	ArrayList createArrayList(double[] a)
    {
		ArrayList returnValues = new ArrayList();
		for (int i = 0; i < a.length; i++) returnValues.add(a[i]);
		return returnValues;
	}

    double[] returnSelf(double[] returnValues)
    {
        return returnValues;
    }
}

