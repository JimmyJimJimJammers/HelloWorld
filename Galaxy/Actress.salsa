module Galaxy;
import java.io.*;
import java.util.*;

// this handles all of the parallelization
behavior Actress
{
    //the location of this Actresss star
	double x = 0.0;
	double y = 0.0;
	double z = 0.0;

    //some variables to be used later
    int X = 0;
    int Y = 1;
    int Z = 2;
    int MIN = 3;
    int MAX = 4;
    int XMIN = 5;
    int YMIN = 6;
    int ZMIN = 7;
    int XMAX = 8;
    int YMAX = 9;
    int ZMAX = 10;
    int AVG = 11;
    int RESULTSIZE = 12; // used to encode the result of one worker with an array of doubles

	/** calculate the distances from this star (n-th line, counting from 0) to all the other stars, there are totally nstar lines */
	ArrayList calc(int n, String fileProcessed, int nstar)
    {
		double[][] starPoints = new double[nstar][3];

		try
        {
			BufferedReader inputFile = new BufferedReader(new FileReader(fileProcessed));
			for (int i = 0; i < nstar; i++)
            {
				String stringPoints = inputFile.readLine();
				String[] parts = stringPoints.split(" ");
                if(parts.length > 1)
                {
                    starPoints[i][0] = Double.parseDouble(parts[0]);
                    starPoints[i][1] = Double.parseDouble(parts[1]);
                    starPoints[i][2] = Double.parseDouble(parts[2]);
                }
			}
			inputFile.close();
		}
        catch (IOException ioe)
        {
			standardOutput<-println("[error] Can't open the file " + fileProcessed + " for reading.");
		}
		x = starPoints[n][0];
		y = starPoints[n][1];
		z = starPoints[n][2];
		getMinMax(n, starPoints)@currentContinuation;
		/*
			 token t = getMinMax(n, starPoints);
			 displayResult(t)@
			 iden(t)@currentContinuation;
			 */
	}

	/** get the minimum distance and the maximum distance and the average distance from the n-th star to all the other stars */
	ArrayList getMinMax(int n, double[][] values)
    {
		double[] r = new double[RESULTSIZE];
		r[X] = r[XMIN] = r[XMAX] = x;
		r[Y] = r[YMIN] = r[YMAX] = y;
		r[Z] = r[ZMIN] = r[ZMAX] = z;
		r[MIN] = Double.MAX_VALUE;
		r[MAX] = 0.0;
		r[AVG] = 0.0;
		reset(r, n, values)@getAvg(token, values.length)@convert2ArrayList(token)@currentContinuation;
	}

	ArrayList convert2ArrayList(double[] a)
    {
		ArrayList r = new ArrayList();
		for (int i = 0; i < a.length; i++) r.add(a[i]);
		return r;
	}

	/** get the Result object containing the minimum and the maximum distances */
	double[] reset(double[] r, int n, double[][] values)
    {

		token rr = reset1(r, values[0]);

		for (int i = 1; i < values.length; i++) if (i != n)
        {
			rr = reset1(rr, values[i]);
		}

		iden(rr)@currentContinuation;

	}

	/** identity function */
	double[] iden(double[] r)
    {
		return r;
	}

	/** change the records for minimum and maximum distances for a Result object */
	double[] reset1(double[] r, double[] star)
    {

		double dx = x-star[0];
		double dy = y-star[1];
		double dz = z-star[2];
		if (dx != 0.0 || dy != 0.0 || dz != 0.0)
        {
			double dis = Math.sqrt(dx*dx+dy*dy+dz*dz);

			if (dis < r[MIN])
            {
				r[MIN] = dis;
				r[XMIN] = star[0];
				r[YMIN] = star[1];
				r[ZMIN] = star[2];
			}

			if (dis > r[MAX])
            {
				r[MAX] = dis;
				r[XMAX] = star[0];
				r[YMAX] = star[1];
				r[ZMAX] = star[2];
			}

			r[AVG] += dis;
		}
		return r;

	}

	double[] getAvg(double[] r, int tot)
    {
		r[AVG] /= tot;
		return r;
	}

	/** for unit test */
	void act(String args[])
    {
		calc(1, "test.txt", 4)@displayResult(token)@
        calc(2, "test.txt", 4)@displayResult(token);
	}

	/** display the content of a Result object */
	ArrayList displayResult(ArrayList r)
    {
		double rmin = (Double)r.get(MIN);
		double rmax = (Double)r.get(MAX);
		double ravg = (Double)r.get(AVG);
		double rx = (Double)r.get(X);
		double ry = (Double)r.get(Y);
		double rz = (Double)r.get(Z);
		double rxmin = (Double)r.get(XMIN);
		double rymin = (Double)r.get(YMIN);
		double rzmin = (Double)r.get(ZMIN);
		double rxmax = (Double)r.get(XMAX);
		double rymax = (Double)r.get(YMAX);
		double rzmax = (Double)r.get(ZMAX);

		standardOutput<-println("\nThe final result for "+rx+" "+ry+" "+rz+" is\nmin distance: "+rmin+"\nfrom "+rxmin+" "+rymin+" "+rzmin+"\nmax distance: "+rmax+"\nfrom "+rxmax+" "+rymax+" "+rzmax+"\navg distance: "+ravg);

		return r;
	}

}

